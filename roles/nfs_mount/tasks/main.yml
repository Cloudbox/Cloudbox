#########################################################################
# Title:         Cloudbox: NFS Mount Role                               #
# Author(s):     l3uddz                                                 #
# URL:           https://github.com/cloudbox/cloudbox                   #
# --                                                                    #
#         Part of the Cloudbox project: https://cloudbox.works          #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: Fail when invalid nfs.mount_client is specified
  fail: msg="You must use a value larger than 2 and lower than 251 for the nfs mount_client advanced setting."
  when: nfs.mount_client < 3 or nfs.mount_client > 250

- name: Create nfs server directories
  file: 'path={{item}} state=directory mode=0775 owner={{user}} group={{user}}'
  with_items:
    - /opt/nfs
    - /mnt/feeder

- name: Import hosts.deny file
  template:
    src: hosts.deny.jinja2
    dest: /etc/hosts.deny
    owner: '{{user}}'
    group: '{{user}}'
    mode: 0644
    force: yes

- name: Import hosts.allow file
  template:
    src: hosts.allow.jinja2
    dest: /etc/hosts.allow
    owner: '{{user}}'
    group: '{{user}}'
    mode: 0644
    force: yes

- name: Install nfs requirements
  apt: 'name={{item}} state=present'
  with_items:
    - rpcbind
    - nfs-common

- name: Import init_vlan.sh file
  template:
    src: init_vlan.sh.jinja2
    dest: /opt/nfs/init_vlan.sh
    owner: '{{user}}'
    group: '{{user}}'
    mode: 0775
    force: yes

- name: Check nfs_vlan.service exists
  stat:
    path: '/etc/systemd/system/nfs_vlan.service'
  register: nfs_vlan_service

- name: Import nfs_vlan.service file
  template:
    src: nfs_vlan.service.jinja2
    dest: /etc/systemd/system/nfs_vlan.service
    owner: '{{user}}'
    group: '{{user}}'
    mode: 0775
    force: yes
  when: not nfs_vlan_service.stat.exists

- name: Start nfs_vlan service
  systemd:
    state: started
    name: nfs_vlan
    daemon_reload: yes
    enabled: yes

- name: Check to see if docker is installed
  stat:
    path: "/usr/bin/docker"
  register: docker_binary

- name: Populate Service Facts
  service_facts:
  when: docker_binary.stat.exists

- name: Get Docker service state
  set_fact:
    docker_service_running: "{{ (services['docker.service'] is defined) and (services['docker.service']['state'] == \"running\") }}"
  when: docker_binary.stat.exists

- name: Gather list of running Docker containers
  shell: "docker ps --format '{{ '{{' }} .Names{{ '}}' }}' | xargs echo -n"
  register: docker_running_containers
  ignore_errors: yes
  when: (docker_binary.stat.exists) and (docker_service_running)

- name: Stop all running Docker containers
  shell: "docker stop {{docker_running_containers.stdout}}"
  ignore_errors: yes
  when: (docker_binary.stat.exists) and (docker_service_running) and not (docker_running_containers.stdout | trim == '')

- name: Check if unionfs service exists
  stat:
    path: "/etc/systemd/system/unionfs.service"
  register: unionfs_service

- name: Populate Service Facts
  service_facts:
  when: unionfs_service.stat.exists

- name: Get unionfs service state
  set_fact:
    unionfs_service_running: "{{ (services['unionfs.service'] is defined) and (services['unionfs.service']['state'] == \"running\") }}"
  when: unionfs_service.stat.exists

- name: Stop existing unionfs service
  systemd: state=stopped name=unionfs
  when: unionfs_service.stat.exists and unionfs_service_running

- name: 'Force unmount /mnt/unionfs'
  shell: '/bin/umount -f /mnt/unionfs 2>/dev/null || :'
  ignore_errors: yes

- name: Import unionfs.service
  template:
    src: unionfs.service.jinja2
    dest: /etc/systemd/system/unionfs.service
    force: yes

- name: Start unionfs service
  systemd: state=started name=unionfs daemon_reload=yes enabled=yes

- name: Wait for 15 seconds before commencing
  wait_for:
    timeout: 15

- name: Start docker
  systemd: state=started name=docker enabled=yes

- name: Wait for 30 seconds before commencing
  wait_for:
    timeout: 30

- name: "Re-start all previously running Docker containers"
  shell: 'docker start {{docker_running_containers.stdout}}'
  ignore_errors: yes
  when: (docker_binary.stat.exists) and (docker_service_running) and not (docker_running_containers.stdout | trim == '')