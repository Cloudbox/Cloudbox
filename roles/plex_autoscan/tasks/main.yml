#########################################################################
# Title:         Cloudbox: Plex Autoscan Role                           #
# Author(s):     l3uddz, desimaniac                                     #
# URL:           https://github.com/cloudbox/cloudbox                   #
# --                                                                    #
#         Part of the Cloudbox project: https://cloudbox.works          #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: Import Services Task
  import_tasks: "subtasks/services.yml"

- name: Create plex_autoscan directories
  file: "path={{ item }} state=directory mode=0775 owner={{ user.name }} group={{ user.name }} recurse=yes"
  with_items:
    - /opt/plex_autoscan

- name: Clone plex_autoscan repo 'HEAD'
  git:
    repo: https://github.com/l3uddz/plex_autoscan.git
    dest: /opt/plex_autoscan
    clone: yes
    version: HEAD
    force: yes
  become: yes
  become_user: "{{ user.name }}"
  ignore_errors: yes
  register: plex_autoscan_clone_status

- name: Clone plex_autoscan repo 'master'
  git:
    repo: https://github.com/l3uddz/plex_autoscan.git
    dest: /opt/plex_autoscan
    clone: yes
    version: master
    force: yes
  become: yes
  become_user: "{{ user.name }}"
  when: plex_autoscan_clone_status is failed

- name: Install pip requirements
  pip:
    requirements: /opt/plex_autoscan/requirements.txt
    executable: pip2

- name: Check if 'config.json' exists
  stat:
    path: "/opt/plex_autoscan/config/config.json"
  register: plex_autoscan_config

- name: Do following tasks when config does not exist
  block:

  - name: Import Plex Auth Token role
    import_role:
      name: plex_auth_token
    when: plex_account_enabled

  - name: "Generate 32 character 'SERVER_PASS'"
    set_fact:
      plex_autoscan_server_pass: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=32') }}"

  - name: Import default 'config.json'
    template:
      src: config.json.j2
      dest: /opt/plex_autoscan/config/config.json
      owner: "{{ user.name }}"
      group: "{{ user.name }}"
      mode: 0775
      force: yes

  when: not plex_autoscan_config.stat.exists

- name: Set 'PLEX_LD_LIBRARY_PATH' in 'config.json'
  shell: |
    CONFIG_PATH="/opt/plex_autoscan/config"
    jq -c '.PLEX_LD_LIBRARY_PATH = "/usr/lib/plexmediaserver/lib"' ${CONFIG_PATH}/config.json | jq . > \
    ${CONFIG_PATH}/tmp.$$.json && mv ${CONFIG_PATH}/tmp.$$.json ${CONFIG_PATH}/config.json
  become: yes
  become_user: "{{ user.name }}"
  when: plex_autoscan_config.stat.exists

- name: Set 'scan.py' as executable
  file:
    path: /opt/plex_autoscan/scan.py
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    mode: a+x

- name: Pull updates from 'config.py'
  command: "/opt/plex_autoscan/scan.py sections"
  become: yes
  become_user: "{{ user.name }}"
  ignore_errors: yes
  tags: plex_autoscan_update_sections

- name: Update 'PLEX_SECTION_PATH_MAPPINGS' in 'config.json'
  command: "/opt/plex_autoscan/scan.py update_sections"
  become: yes
  become_user: "{{ user.name }}"
  ignore_errors: yes
  async: 60
  poll: 0
  tags: plex_autoscan_update_sections

- name: Start 'plex_autoscan.service'
  systemd:
    name: plex_autoscan
    state: started
    enabled: yes
    daemon_reload: yes
