#########################################################################
# Title:         Cloudbox: NZBGet Role                                  #
# Author(s):     L3uddz, Desimaniac                                     #
# URL:           https://github.com/cloudbox/cloudbox                   #
# Docker Image:  hotio/suitarr                                          #
# --                                                                    #
#         Part of the Cloudbox project: https://cloudbox.rocks          #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: "Set DNS Record on CloudFlare"
  include_role:
    name: cloudflare
  vars:
    subdomain: nzbget

- name: Stop and remove any existing container
  docker_container:
    name: nzbget
    state: absent

- name: Create nzbget directories
  file: "path={{item}} state=directory mode=0775 owner={{user}} group={{user}}"
  with_items:
    - /opt/nzbget

- name: Check subfolder1 exists
  stat:
    path: /opt/nzbget/NZBGet
  register: subfolder1

- name: Check subfolder2 exists
  stat:
    path: /opt/nzbget/app
  register: subfolder2

- name: Move 'nzbget' folder contents to 'app' subfolder
  shell: |
    mv /opt/nzbget /tmp/app
    mkdir /opt/nzbget
    mv /tmp/app /opt/nzbget/
    find /opt/nzbget/* -type d -empty -delete
    chown -R {{user}}:{{user}} /opt/nzbget
  when: not (subfolder1.stat.exists or subfolder2.stat.exists)

- name: Move 'NZBGet' subfolder to 'app' subfolder
  shell: |
    mv /opt/nzbget/NZBGet /opt/nzbget/app
    chown -R {{user}}:{{user}} /opt/nzbget
  when: (subfolder1.stat.exists) and (not subfolder2.stat.exists)

- name: Create new downloads directories
  file: "path={{item}} state=directory mode=0775 owner={{user}} group={{user}} recurse=yes"
  with_items:
    - "{{downloads.nzbs}}"
    - "{{downloads.nzbs}}/nzbget"
  when: new_downloads_settings

# This is still needed as sometimes it will remain in root.
- name: "Set {{downloads.nzbs}} permissions"
  shell: "chmod -R 775 {{downloads.nzbs}}"
  when: new_downloads_settings

- name: "Set {{downloads.nzbs}} owner"
  shell: "chown -R {{user}}:{{user}} {{downloads.nzbs}}"
  when: new_downloads_settings

- name: Create old downloads directories
  file: "path={{item}} state=directory mode=0775 owner={{user}} group={{user}} recurse=yes"
  with_items:
    - "{{nzbget.downloads}}"
  when: old_downloads_settings

# This is still needed as sometimes it will remain in root.
- name: "Set {{nzbget.downloads}} permissions"
  shell: "chmod -R 775 {{nzbget.downloads}}"
  when: old_downloads_settings

- name: "Set {{nzbget.downloads}} owner"
  shell: "chown -R {{user}}:{{user}} {{nzbget.downloads}}"
  when: old_downloads_settings

- name: Check nzbget.conf exists
  stat:
    path: "/opt/nzbget/app/nzbget.conf"
  register: nzbget_conf

- name: Set default_volumes variable
  set_fact:
    default_volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - "/opt/nzbget:/config"
      - "/mnt:/mnt"
      - "/opt/scripts:/scripts"

- name: Set new_downloads_paths variable
  set_fact:
    new_downloads_paths:
      - "{{downloads.nzbs}}/nzbget:/downloads/nzbs/nzbget"
  when: new_downloads_settings

- name: Set old_downloads_paths variable
  set_fact:
    old_downloads_paths:
      - "{{nzbget.downloads}}:/downloads/nzbget"
  when: old_downloads_settings

- name: Create and start container
  docker_container:
    name: nzbget
    image: hotio/suitarr:nzbget
    pull: yes
    published_ports:
      - "127.0.0.1:6789:6789"
    env:
      VERSION: "unstable"
      BACKUP: "no"
      PUID: "{{uid}}"
      PGID: "{{gid}}"
      VIRTUAL_HOST: "nzbget.{{domain}}"
      VIRTUAL_PORT: 6789
      LETSENCRYPT_HOST: "nzbget.{{domain}}"
      LETSENCRYPT_EMAIL: "{{email}}"
      LC_ALL: "C"
    volumes: "{{ default_volumes + new_downloads_paths|default([]) + old_downloads_paths|default([]) }}"
    restart_policy: always
    networks:
      - name: cloudbox
        aliases:
          - nzbget
    state: started

- name: Settings Tweaks
  include_tasks: "nzbget_settings.yml"
  when: not (
        (nzbget_conf.stat.exists)
        or
        ((continuous_integration|default(false,true))|bool)
    )
