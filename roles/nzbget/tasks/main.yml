#########################################################################
# Title:         Cloudbox: NZBGet Role                                  #
# Author(s):     l3uddz, desimaniac                                     #
# URL:           https://github.com/cloudbox/cloudbox                   #
# Docker Image:  hotio/suitarr                                          #
# --                                                                    #
#         Part of the Cloudbox project: https://cloudbox.works          #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: "Set DNS Record on CloudFlare"
  include_role:
    name: cloudflare
  vars:
    subdomain: nzbget

- name: Stop and remove any existing container
  docker_container:
    name: nzbget
    state: absent

# START - Suitarr Migration Tasks
- name: Check folder exists
  stat:
    path: /opt/nzbget
  register: folder

- name: Check subfolder1 exists
  stat:
    path: /opt/nzbget/NZBGet
  register: subfolder1

- name: Check subfolder2 exists
  stat:
    path: /opt/nzbget/app
  register: subfolder2

- name: Move 'nzbget' folder contents to 'app' subfolder
  shell: |
    mv /opt/nzbget /tmp/app
    mkdir /opt/nzbget
    mv /tmp/app /opt/nzbget/
    find /opt/nzbget/* -type d -empty -delete
    chown -R {{user}}:{{user}} /opt/nzbget
  when: (folder.stat.exists) and not (subfolder1.stat.exists or subfolder2.stat.exists)

- name: Move 'NZBGet' subfolder to 'app' subfolder
  shell: |
    mv /opt/nzbget/NZBGet /opt/nzbget/app
    chown -R {{user}}:{{user}} /opt/nzbget
  when: (folder.stat.exists) and (subfolder1.stat.exists) and (not subfolder2.stat.exists)
# END - Suitarr Migration Tasks

- name: Create nzbget directories
  file: "path={{item}} state=directory mode=0775 owner={{user}} group={{user}}"
  with_items:
    - /opt/nzbget

- name: Create new downloads directories
  file: "path={{item}} state=directory mode=0775 owner={{user}} group={{user}} recurse=yes"
  with_items:
    - "{{downloads.nzbs}}"
    - "{{downloads.nzbs}}/nzbget"
  when: (nzbs_downloads_path is defined)|default(false)

- name: Create old downloads directories
  file: "path={{item}} state=directory mode=0775 owner={{user}} group={{user}} recurse=yes"
  with_items:
    - "{{nzbget.downloads}}"
  when: (old_nzbget_downloads_path is defined)|default(false)

- name: Check nzbget.conf exists
  stat:
    path: "/opt/nzbget/app/nzbget.conf"
  register: nzbget_conf

- name: Set default_volumes variable
  set_fact:
    default_volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - "/opt/nzbget:/config"
      - "/opt/scripts:/scripts"
      - "/mnt:/mnt"

- name: Create and start container
  docker_container:
    name: nzbget
    image: hotio/suitarr:nzbget
    pull: yes
    published_ports:
      - "127.0.0.1:6789:6789"
    env:
      VERSION: "{{suitarr.version}}"
      FALLBACK: "yes"
      BACKUP: "no"
      PUID: "{{uid}}"
      PGID: "{{gid}}"
      UMASK: 002
      VIRTUAL_HOST: "nzbget.{{domain}}"
      VIRTUAL_PORT: 6789
      LETSENCRYPT_HOST: "nzbget.{{domain}}"
      LETSENCRYPT_EMAIL: "{{email}}"
      LC_ALL: "C"
    volumes: "{{ default_volumes + nzbs_downloads_path|default([]) + old_nzbget_downloads_path|default([]) }}"
    labels:
      "com.github.cloudbox.cloudbox_managed": "true"
    networks:
      - name: cloudbox
        aliases:
          - nzbget
    purge_networks: yes
    restart_policy: unless-stopped
    state: started

- name: Scripts Task
  import_tasks: "nzbget_scripts.yml"
  when: not continuous_integration
  tags: nzbget-scripts

- name: Settings Task
  include_tasks: "nzbget_settings.yml"
  when: not (
        (nzbget_conf.stat.exists)
        or
        (continuous_integration)
    )
