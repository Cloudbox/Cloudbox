#########################################################################
# Title:         Backup: Vault Service                                  #
# Author(s):     desimaniac, l3uddz                                     #
# URL:           https://github.com/cloudbox/cloudbox                   #
# --                                                                    #
#         Part of the Cloudbox project: https://cloudbox.works          #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: Install common packages
  apt: "name={{item}} state=present"
  with_items:
    - curl
  ignore_errors: yes

- name: Set variables
  set_fact:
    vault_username: "{{ vault_service.user | hash('sha1') }}"
    vault_password: "{{ vault_service.pass }}"

- name: Cleanup vault tmp path
  shell: rm -rf /tmp/vault
  args:
    warn: no

- name: Create vault tmp path
  file: "path='/tmp/vault' state=directory mode=0775 owner={{user}} group={{user}}"

- name: Encrypt config file(s)
  shell: "openssl enc -aes-256-cbc -salt -in {{ item }} -out /tmp/vault/{{ item | basename }}.enc -k '{{ vault_password }}'"
  args:
    warn: no
  become: yes
  become_user: "{{user}}"
  ignore_errors: yes
  with_items:
   - "{{playbook_dir}}/ansible.cfg"
   - "{{playbook_dir}}/accounts.yml"
   - "{{playbook_dir}}/settings.yml"
   - "{{playbook_dir}}/adv_settings.yml"
   - "{{playbook_dir}}/backup_config.yml"
   - "/home/{{user}}/.config/rclone/rclone.conf"

- name: "Validate config file(s) for encryption."
  shell: "head -c 10 {{item}} | grep -q Salted"
  register: encryption_check
  ignore_errors: yes
  failed_when: encryption_check.rc > 1
  with_fileglob:
    - "/tmp/vault/*"

- name: Set variables
  set_fact:
    unencrypted_files_list: "{{ encryption_check.results | selectattr('rc', 'equalto', 1) | map(attribute='item') | map('regex_replace', '^/tmp/vault/|.enc$','') | list | sort(case_sensitive=False) | join(', ') }} "
    encrypted_files_list: "{{ encryption_check.results | selectattr('rc', 'equalto', 0) | map(attribute='item') | map('regex_replace', '^/tmp/vault/|.enc$','') | list | sort(case_sensitive=False) | join(', ') }} "

- name: Print error message when config files were not encrypted successfully
  debug:
    msg:
      - "The following config files were NOT encrypted successfully: '{{ unencrypted_files_list | trim }}'"
      - "Vault Service will now be skipped."
  when: (unencrypted_files_list | trim != "")

- name: "Pushover Message: Config files were not encrypted successfully encrypted"
  include_role:
    name: pushover
  vars:
    message: "The following config files were NOT encrypted successfully: '{{ unencrypted_files_list | trim }}'. Vault Service will now be skipped."
  when: (unencrypted_files_list | trim != "")

- name: Print error message when config files were encrypted successfully
  debug:
    msg:
      - "The following config files were encrypted successfully: '{{ encrypted_files_list | trim }}'"
  when: (encrypted_files_list | trim != "")

- name: Vault Service Upload Tasks
  block:

  - name: Upload encrypted config files
    shell: "curl -F 'file=@{{ item }}' http://vault.cloudbox.works/save/{{ vault_username }}/{{ (item | basename | splitext)[0] }}"
    args:
      warn: no
    with_fileglob:
      - "/tmp/vault/*"
    register: files_upload

  - name: Set 'files_too_large_to_upload_list' variable
    set_fact:
      files_too_large_to_upload_list: "{{ files_upload.results | selectattr('stdout', 'search', 'too large') | map(attribute='item') | map('regex_replace', '^/tmp/vault/|.enc$','') | list | sort(case_sensitive=False) | join(', ') }} "

  - name: Print error mesage when config files were too large to upload
    debug:
      msg: "The following encrypted config files were too large to upload to the Vault Service: '{{ files_too_large_to_upload_list | trim }}'"
    when: (files_too_large_to_upload_list | trim != "")

  - name: "Pushover Message: Config files were too large to upload to the Vault Service"
    include_role:
      name: pushover
    vars:
      message: "The following encrypted config files were too large to upload to the Vault Service: '{{ files_too_large_to_upload_list | trim }}'"
    when: (files_too_large_to_upload_list | trim != "")

  - name: Set 'files_uploaded_list' variable
    set_fact:
      files_uploaded_list: "{{ files_upload.results | selectattr('stdout', 'search', 'Successfull') | map(attribute='item') | map('regex_replace', '^/tmp/vault/|.enc$','') | list | sort(case_sensitive=False) | join(', ') }} "

  - name: Print success message when config files were successfully uploaded
    debug:
      msg: "The following encrypted config files were successfully uploaded to the Vault Service: '{{ files_uploaded_list | trim }}'"
    when: (files_uploaded_list | trim != "")

  - name: "Pushover Message: Config files were successfully encrypted and uploaded to the Vault Service"
    include_role:
      name: pushover
    vars:
      message: "Config files were successfully encrypted and uploaded to the Vault Service."
    when: (files_uploaded_list | trim != "")

  when: (unencrypted_files_list | trim == "")
