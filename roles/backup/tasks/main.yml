#########################################################################
# Title:         Cloudbox: Backup Role                                  #
# Author(s):     L3uddz, Desimaniac, RXWatcher1                         #
# URL:           https://github.com/cloudbox/cloudbox                   #
# --                                                                    #
#         Part of the Cloudbox project: https://cloudbox.rocks          #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################

---
- block:
  - name: Create log directory
    file: "path={{item}} state=directory mode=0775 owner={{user}} group={{user}} recurse=yes"
    with_items:
      - /home/{{user}}/logs

  - name: "Check if backup.lock is present"
    stat:
      path: "{{playbook_dir}}/backup.lock"
    register: backup_lock

  - name: "Fail when backup.lock exists"
    fail:
      msg: "Backup is already in progress. Please wait for it to complete."
    when: backup_lock.stat.exists

  - name: "Create backup.lock"
    file:
      path: "{{playbook_dir}}/backup.lock"
      state: touch
      owner: "{{user}}"
      group: "{{user}}"
      mode: 0775
    when: backup_lock.stat.exists == False

  - name: "Get Start Time"
    set_fact: start_time="{{lookup('pipe','date \"+%s\"')}}"

  - name: "Pushover Message: Started Cloudbox backup task."
    include_role:
      name: pushover
    vars:
      message: "Started Cloudbox backup task."

  - name: "Check {{backup.tar_dest}} exists"
    stat:
      path: "{{backup.tar_dest}}"
    register: backup_location

  - name: "Create backup location {{backup.tar_dest}}"
    file:
      path: "{{backup.tar_dest}}"
      state: directory
      owner: "{{user}}"
      group: "{{user}}"
      mode: 0775
      recurse: yes
    when: backup_location.stat.exists == False

  - name: "Copy files to \"{{backup.tar_dest}}\""
    copy:
      src: "{{item}}"
      dest: "{{backup.tar_dest}}"
      owner: "{{user}}"
      group: "{{user}}"
      mode: 0775
      force: yes
    with_items:
     - "{{playbook_dir}}/ansible.cfg"
     - "{{playbook_dir}}/accounts.yml"
     - "{{playbook_dir}}/settings.yml"
     - "{{playbook_dir}}/adv_settings.yml"
     - "/home/{{user}}/.config/rclone/rclone.conf"
    ignore_errors: yes

  - name: "Check {{backup.tar_dest}}/cloudbox.tar exists"
    stat:
      path: "{{backup.tar_dest}}/cloudbox.tar"
      get_attributes: false
      get_checksum: false
      get_md5: false
      get_mime: false
    register: backup_previous

  # Use mv because Ansible copy & delete takes a lot longer.
  - name: "Moving cloudbox.tar to cloudbox.tar.backup"
    shell: "mv '{{backup.tar_dest}}/cloudbox.tar' '{{backup.tar_dest}}/cloudbox.tar.backup'"
    when: backup_previous.stat.exists

  - name: "Synchronize '/etc/systemd/system' to '/opt/systemd-backup' for inclusion in backup"
    synchronize:
      src: "/etc/systemd/system/"
      dest: "/opt/systemd-backup"
      mode: push
      recursive: yes
    ignore_errors: yes

  - name: "Make systemd-backup folder readable/writeable by {{user}}"
    file: "path=/opt/systemd-backup state=directory mode=0775 owner={{user}} group={{user}} recurse=yes"
    ignore_errors: yes

  - name: "Gather list of running Docker containers"
    shell: "docker ps --format '{{ '{{' }} .Names{{ '}}' }}' | xargs echo -n"
    register: docker_running_containers
    ignore_errors: yes

  - name: "Stop all running Docker containers."
    shell: "docker stop {{docker_running_containers.stdout}}"
    ignore_errors: yes
    when: not (docker_running_containers.stdout | trim == '')

  - name: "Pushover Message: Stopped Docker containers."
    include_role:
      name: pushover
    vars:
      message: "Stopped Cloudbox containers."
      when: not (docker_running_containers.stdout | trim == '')

  - name: Check if plexdrive is running
    command: systemctl status plexdrive
    ignore_errors: yes
    register: plexdrive_status

  - name: Check if cloudplow is running
    command: systemctl status cloudplow
    ignore_errors: yes
    register: cloudplow_status

  - name: Stop cloudplow service
    systemd:
      name: cloudplow
      state: stopped
    when: cloudplow_status is success

  - name: Stop plexdrive service
    systemd:
      name: plexdrive
      state: stopped
    when: plexdrive_status is success

  - name: "Archiving /opt to {{backup.tar_dest}}/cloudbox.tar"
    shell: |
      tar \
        --ignore-failed-read \
        --warning=no-file-changed \
        --warning=no-file-removed \
        --exclude='./plex/Library/Application Support/Plex Media Server/Cache/PhotoTranscoder/*' \
        --exclude='./sonarr/app/MediaCover/*' \
        --exclude='./radarr/app/MediaCover/*' \
        -cf '{{backup.tar_dest}}/cloudbox.tar' \
        -C /opt .
    become: yes
    become_user: "{{user}}"
    args:
      warn: no

  - name: "Get new {{backup.tar_dest}}/cloudbox.tar stats"
    stat:
      path: "{{backup.tar_dest}}/cloudbox.tar"
      get_attributes: false
      get_checksum: false
      get_md5: false
      get_mime: false
    register: backup_new

  - name: "Pushover Message: Backup archive created (file size: {{ ( ( backup_new.stat.size / (1024*1024*1024) ) | int | abs ) }}GB)."
    include_role:
      name: pushover
    vars:
      message: "Backup archive created (file size: {{ ( ( backup_new.stat.size / (1024*1024*1024) ) | int | abs ) }}GB)."
    when: not (backup_new is undefined)
    ignore_errors: yes

  - name: "Remove cloudbox.tar.backup from \"{{backup.tar_dest}}\""
    file:
      path: "{{backup.tar_dest}}/cloudbox.tar.backup"
      state: absent
    when: backup_new.stat.exists

  - name: Start plexdrive service
    systemd:
      name: plexdrive
      state: started
    when: plexdrive_status is success

  - name: "Wait for 5 seconds before starting containers"
    wait_for:
      timeout: 5

  - name: "Restart all previously running Docker containers."
    shell: 'docker start {{docker_running_containers.stdout}}'
    ignore_errors: yes
    when: not (docker_running_containers.stdout | trim == '')

  - name: "Pushover Message: Started Docker containers."
    include_role:
      name: pushover
    vars:
      message: "Started Cloudbox containers."
    when: not (docker_running_containers.stdout | trim == '')

  - name: "Wait for 10 seconds before uploads"
    wait_for:
      timeout: 10

  # Reset mod dates to avoid conflicts during rclone backup. Ansible module doesn't touch folder contents via wildcard.
  - name: "Reset permissions and mod dates to files in {{backup.tar_dest}}"
    file:
      path: "{{backup.tar_dest}}/{{item}}"
      state: touch
      owner: "{{user}}"
      group: "{{user}}"
      mode: 0755
      force: yes
    with_items:
     - "ansible.cfg"
     - "accounts.yml"
     - "settings.yml"
     - "adv_settings.yml"
     - "rclone.conf"
     - "cloudbox.tar"

  # Due to a touch command in a previous backup, all files on backup.rclone_dest have same mod dates, therefore, only one file's mod date is needed.
  - name: "Get datestamp for previous \"{{backup.rclone_dest}}/cloudbox.tar\""
    shell: "rclone lsl {{ backup.rclone_dest }}/cloudbox.tar | cut -d ' ' -f 2,3 | cut -d '.' -f 1 | sed s/' '/_/g | sed s/':'/./g"
    become: yes
    become_user: "{{user}}"
    register: rclone_timestamp
    ignore_errors: yes
    when: backup.use_rclone

  # If rclone_timestamp is blank (would happen if cloudbox.tar did not exist), default the naming of other files to 'filename.old.ext'.
  - name: "Archive previous files in \"{{backup.rclone_dest}}/\""
    shell: "rclone moveto '{{ backup.rclone_dest }}/{{ item }}' '{{ backup.rclone_dest }}/archived/{{ item }}_{{ rclone_timestamp.stdout | default('old', true) }}' 2>/dev/null"
    become: yes
    become_user: "{{user}}"
    ignore_errors: yes
    when: backup.use_rclone
    with_items:
     - "ansible.cfg"
     - "accounts.yml"
     - "settings.yml"
     - "adv_settings.yml"
     - "rclone.conf"
     - "cloudbox.tar"

  - name: "Upload backup with rclone to \"{{backup.rclone_dest}}\""
    command: "rclone copy '{{backup.tar_dest}}' '{{backup.rclone_dest}}' --stats=30s -v --transfers=2 --drive-chunk-size=64M --log-file='/home/{{user}}/logs/cloudbox_backup_rclone-{{lookup('pipe','date +%Y-%m-%d_%H-%M-%S')}}.log'"
    become: yes
    become_user: "{{user}}"
    when: backup.use_rclone

  - name: "Pushover Message: Uploaded backup with rclone to \"{{backup.rclone_dest}}\"."
    include_role:
      name: pushover
    vars:
      message: "Uploaded backup with rclone to \"{{backup.rclone_dest}}\"."
    when: backup.use_rclone

  - name: "Upload backup with rsync to \"{{backup.rsync_dest}}\""
    synchronize:
      src: "{{backup.tar_dest}}/"
      dest: "{{backup.rsync_dest}}/"
      rsync_opts:
        - "--log-file='/home/{{user}}/logs/cloudbox_backup_rsync-{{lookup('pipe','date +%Y-%m-%d_%H-%M-%S')}}.log'"
    become: yes
    become_user: "{{user}}"
    when: backup.use_rsync

  - name: "Pushover Message: Uploaded backup with rsync to \"{{backup.rsync_dest}}\"."
    include_role:
      name: pushover
    vars:
      message: "Uploaded backup with rsync to \"{{backup.rsync_dest}}\"."
    when: backup.use_rsync

  - name: "Get End Time"
    set_fact: end_time="{{lookup('pipe','date \"+%s\"')}}"

  - name: "Pushover Message: Finished Cloudbox backup task in {{  ((((end_time|int) - (start_time|int)) /60)|int|abs) }} minutes."
    include_role:
      name: pushover
    vars:
      message: "Finished Cloudbox backup task in {{  ((((end_time|int) - (start_time|int)) /60)|int|abs) }} minutes."

  - name: Start cloudplow service
    systemd:
      name: cloudplow
      state: started
    when: cloudplow_status is success

  - name: "Remove cloudbox.tar from \"{{backup.tar_dest}}\""
    file:
      path: "{{backup.tar_dest}}/cloudbox.tar"
      state: absent
    when: backup_new.stat.exists and backup.keep_local_copy == False

  - name: "Get ansible-playbook binary path"
    shell: "which ansible-playbook"
    register: playbook_binary

  - name: "Schedule cron backup"
    cron:
      name: "Backup Cloudbox"
      special_time: "{{backup.cron_time}}"
      job: "PATH='/usr/bin:/bin:/usr/local/bin' {{playbook_binary.stdout}} {{playbook_dir}}/cloudbox.yml --tags backup >> /home/{{user}}/logs/cloudbox_backup-{{ '`' }}date +\\%Y-\\%m-\\%d_\\%H-\\%M-\\%S{{ '`' }}.log 2>&1"
      state: "{{backup.cron_state}}"

  - debug:
      msg: "Backup Completed Successfully."

  rescue:
    - name: Start plexdrive service
      systemd:
        name: plexdrive
        state: started
      when: plexdrive_status is success

    - name: "Wait for 5 seconds before starting containers"
      wait_for:
        timeout: 5

    - name: "Restart all previously running Docker containers."
      shell: 'docker start {{docker_running_containers.stdout}}'
      ignore_errors: yes
      when: not (docker_running_containers.stdout | trim == '')

    - name: Start cloudplow service
      systemd:
        name: cloudplow
        state: started
      when: cloudplow_status is success

    - debug:
        msg: 'Backup terminated due to an error.'

    - name: "Pushover Message: Backup terminated due to an error."
      include_role:
        name: pushover
      vars:
        message: "Backup terminated due to an error."

  always:
  - name: "Remove backup.lock"
    file:
      path: "{{playbook_dir}}/backup.lock"
      state: absent
    when: backup_lock.stat.exists == False

  - name: Reset logs folder ownership
    shell: "chown -R {{user}}:{{user}} /home/{{user}}/logs/"
    args:
      warn: no
