#########################################################################
# Title:         Cloudbox: Backup Role                                  #
# Author(s):     L3uddz, Desimaniac, RXWatcher1                         #
# URL:           https://github.com/cloudbox/cloudbox                   #
# --                                                                    #
#         Part of the Cloudbox project: https://cloudbox.rocks          #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- block:
  - name: Check if previous backup exists locally
    find:
      paths: "{{backup.tar_dest}}"
      file_type: file
      patterns: '*.tar'
      recurse: yes
    register: dir_files

  # Use mv because Ansible copy & delete takes a lot longer.
  - name: "Moving '{{backup.tar_dest}}' to '{{backup.tar_dest}}.old'."
    shell: "mv '{{backup.tar_dest}}' '{{backup.tar_dest}}.old'"
    when: dir_files.matched|int != 0

  - name: "Create backup folders."
    file: "path={{item}} state=directory mode=0775 owner={{user}} group={{user}} recurse=yes"
    with_items:
      - "/home/{{user}}/logs"
      - "/home/{{user}}/logs/backup"
      - "{{backup.tar_dest}}"
      - "{{backup.tar_dest}}/opt"

  - name: "Create 'backup.lock'."
    file:
      path: "{{playbook_dir}}/backup.lock"
      state: touch
      owner: "{{user}}"
      group: "{{user}}"
      mode: 0775

  - name: "Get Start Time"
    set_fact:
      start_time: "{{ lookup('pipe','date \"+%s\"') }}"

  - name: "Pushover Message: Started Cloudbox backup task."
    include_role:
      name: pushover
    vars:
      message: "Started Cloudbox backup task."

  - name: "Copy files to '{{backup.tar_dest}}'."
    copy:
      src: "{{item}}"
      dest: "{{backup.tar_dest}}"
      owner: "{{user}}"
      group: "{{user}}"
      mode: 0775
      force: yes
    with_items:
     - "{{playbook_dir}}/ansible.cfg"
     - "{{playbook_dir}}/accounts.yml"
     - "{{playbook_dir}}/settings.yml"
     - "{{playbook_dir}}/adv_settings.yml"
     - "/home/{{user}}/.config/rclone/rclone.conf"
    ignore_errors: yes

  - name: "Look for 'backup_excludes.txt' file in cloudbox folder."
    stat:
      path: "{{playbook_dir}}/backup_excludes.txt"
    register: backup_excludes_file

  - name: "Copy files to '{{backup.tar_dest}}'."
    copy:
      src: "{{playbook_dir}}/backup_excludes.txt"
      dest: "{{backup.tar_dest}}"
      owner: "{{user}}"
      group: "{{user}}"
      mode: 0775
      force: yes
    when: backup_excludes_file.stat.exists

  - name: "Synchronize '/etc/systemd/system' to '/opt/systemd-backup' for inclusion in backup."
    synchronize:
      src: "/etc/systemd/system/"
      dest: "/opt/systemd-backup"
      mode: push
      recursive: yes
    ignore_errors: yes

  - name: "Make systemd-backup folder readable/writeable by '{{user}}'."
    file: "path=/opt/systemd-backup state=directory mode=0775 owner={{user}} group={{user}} recurse=yes"
    ignore_errors: yes

  - name: "Gather list of running Cloudbox-managed Docker containers."
    shell: "docker ps --format '{{ '{{' }} .Names{{ '}}' }}' --filter label=com.github.cloudbox.cloudbox_managed=true | xargs echo -n"
    register: cloudbox_managed_containers
    ignore_errors: yes

  - name: "Stop all running Cloudbox-managed Docker containers."
    shell: "docker stop {{cloudbox_managed_containers.stdout}}"
    ignore_errors: yes
    when: not (cloudbox_managed_containers.stdout | trim == '')

  - name: "Pushover Message: Stopped Cloudbox-managed Docker containers."
    include_role:
      name: pushover
    vars:
      message: "Stopped Cloudbox-managed Docker containers."
      when: not (cloudbox_managed_containers.stdout | trim == '')

  - name: Populate Service Facts
    service_facts:

  - name: Check if 'plexdrive.service' exists
    stat:
      path: "/etc/systemd/system/plexdrive.service"
    register: plexdrive_service

  - name: Get plexdrive service state
    set_fact:
      plexdrive_service_running: "{{ (services['plexdrive.service']['state'] == \"running\") }}"
    when: plexdrive_service.stat.exists

  - name: Stop plexdrive service
    systemd:
      name: plexdrive
      state: stopped
    when: plexdrive_service.stat.exists and plexdrive_service_running

  - name: Check if 'cloudplow.service' exists
    stat:
      path: "/etc/systemd/system/cloudplow.service"
    register: cloudplow_service

  - name: Get cloudplow service state
    set_fact:
      cloudplow_service_running: "{{ (services['cloudplow.service']['state'] == \"running\") }}"
    when: cloudplow_service.stat.exists

  - name: Stop cloudplow service
    systemd:
      name: cloudplow
      state: stopped
    when: cloudplow_service.stat.exists and cloudplow_service_running

  - name: Check if 'traktarr.service' exists
    stat:
      path: "/etc/systemd/system/traktarr.service"
    register: traktarr_service

  - name: Get traktarr service state
    set_fact:
      traktarr_service_running: "{{ (services['traktarr.service']['state'] == \"running\") }}"
    when: traktarr_service.stat.exists

  - name: Stop traktarr service
    systemd:
      name: traktarr
      state: stopped
    when: traktarr_service.stat.exists and traktarr_service_running

  - name: "Archiving '/opt' to '{{backup.tar_dest}}/opt/'."
    shell: |
      find /opt/ -mindepth 1 -maxdepth 1 -type d -execdir \
      tar \
        --ignore-failed-read \
        --warning=no-file-changed \
        --warning=no-file-removed \
        --exclude-from '{{ (backup_excludes_file is defined and backup_excludes_file.stat.exists) | ternary(playbook_dir + '/backup_excludes.txt', playbook_dir + '/roles/backup/files/backup_excludes.txt') }}' \
        -cf "{{backup.tar_dest}}/opt/"{}.tar {} \; \
        2> /home/{{user}}/logs/backup/cloudbox_backup_tar_stderr.log
    args:
      executable: /bin/bash
      warn: no

  - name: Check if tar files were created
    find:
      paths: "{{backup.tar_dest}}/opt/"
      file_type: file
      patterns: '*.tar'
    register: dir_files2

  - name: Abort backup when tar creation fails.
    fail: msg="There must have been an issue during the tar creation tasks as they are missing in '{{backup.tar_dest}}/opt/'"
    when: dir_files2.matched|int == 0

  - name: "Remove {{backup.tar_dest}}.old'"
    file:
      path: "{{backup.tar_dest}}.old"
      state: absent
    when: dir_files2.matched|int != 0

  - name: "Get '{{backup.tar_dest}}/' size"
    shell: du -sh --apparent-size {{backup.tar_dest}} | /usr/bin/awk '{print $1}'
    register: backup_new

  - name: "Set backup_size"
    set_fact:
      backup_size: "{{backup_new.stdout}}B"

  - name: "Pushover Message: Backup archive created (file size: {{backup_size}})."
    include_role:
      name: pushover
    vars:
      message: "Backup archive created (file size: {{backup_size}})."
    ignore_errors: yes

  - name: "Start plexdrive service."
    systemd:
      name: plexdrive
      state: started
    when: plexdrive_service.stat.exists and plexdrive_service_running

  - name: "Wait for 5 seconds before starting containers."
    wait_for:
      timeout: 5

  - name: "Start all previously running Cloudbox-managed Docker containers."
    shell: 'docker start {{cloudbox_managed_containers.stdout}}'
    ignore_errors: yes
    when: not (cloudbox_managed_containers.stdout | trim == '')

  - name: "Pushover Message: Started Cloudbox-managed Docker containers."
    include_role:
      name: pushover
    vars:
      message: "Started Cloudbox-managed Docker containers."
    when: not (cloudbox_managed_containers.stdout | trim == '')

  - name: "Wait for 10 seconds before uploads"
    wait_for:
      timeout: 10

  - name: "Reset folder ownership."
    shell: "chown -R {{user}}:{{user}} {{backup.tar_dest}}/"
    args:
      warn: no

  # Reset mod dates to avoid conflicts during rclone backup. Ansible module doesn't touch folder contents via wildcard.
  - name: "Reset permissions and mod dates to files in '{{backup.tar_dest}}/'."
    shell: find '{{backup.tar_dest}}' -type f  -exec touch {} +
    become: yes
    become_user: "{{user}}"
    args:
      executable: /bin/bash
      warn: no

  # Due to a touch command in a previous backup, all files on backup.rclone_dest have same mod dates, therefore, only one file's mod date is needed.
  - name: "Get datestamp for previous '{{backup.rclone_dest}}/settings.yml'."
    shell: "rclone lsl {{ backup.rclone_dest }}/settings.yml | sed -e 's/^[ \t]*//' | cut -d ' ' -f 2,3 | cut -d '.' -f 1 | sed s/' '/_/g | sed s/':'/./g"
    become: yes
    become_user: "{{user}}"
    register: rclone_timestamp
    ignore_errors: yes
    when: backup.use_rclone

  # If rclone_timestamp is blank (would happen if settings.yml was not at destination), default the naming of files to '/archived/old/filename.ext', else /archived/date/filename.ext.
  - name: "Archive previous files in '{{backup.rclone_dest}}'."
    shell: "rclone moveto '{{ backup.rclone_dest }}/{{ item }}' '{{ backup.rclone_dest }}/archived/{{ rclone_timestamp.stdout | default('old', true) }}/{{ item }}' 2>/dev/null"
    become: yes
    become_user: "{{user}}"
    register: rclone_move
    failed_when: rclone_move.rc > 3
    ignore_errors: yes
    when: backup.use_rclone
    with_items:
     - "opt"
     - "ansible.cfg"
     - "accounts.yml"
     - "settings.yml"
     - "adv_settings.yml"
     - "rclone.conf"
     - "backup_excludes.txt"
     - "cloudbox.tar"

  - name: "Wait for 5 seconds before uploading"
    wait_for:
      timeout: 5

  - name: "Use rclone to upload backup to '{{backup.rclone_dest}}'."
    command: "rclone copy '{{backup.tar_dest}}' '{{backup.rclone_dest}}' --stats=30s -v --transfers=4 --drive-chunk-size=64M --log-file='/home/{{user}}/logs/backup/cloudbox_backup_rclone.log'"
    become: yes
    become_user: "{{user}}"
    when: backup.use_rclone

  - name: "Pushover Message: Rclone uploaded backup to '{{backup.rclone_dest}}'."
    include_role:
      name: pushover
    vars:
      message: "Rclone uploaded backup to '{{backup.rclone_dest}}'."
    when: backup.use_rclone

  - name: "Use rsync to upload backup to '{{backup.rsync_dest}}'."
    synchronize:
      src: "{{backup.tar_dest}}/"
      dest: "{{backup.rsync_dest}}/"
      rsync_opts:
        - "--log-file='/home/{{user}}/logs/backup/cloudbox_backup_rsync.log'"
    become: yes
    become_user: "{{user}}"
    when: backup.use_rsync

  - name: "Pushover Message: Rsync uploaded backup to '{{backup.rsync_dest}}'."
    include_role:
      name: pushover
    vars:
      message: "Rsync uploaded backup to '{{backup.rsync_dest}}'."
    when: backup.use_rsync

  - name: "Get End Time"
    set_fact:
      end_time: "{{ lookup('pipe','date \"+%s\"') }}"

  - name: "Calculate Total Time"
    set_fact:
      total_time: "{{ (((end_time|int) - (start_time|int)) / 60) | int | abs }}"

  - name: "Pushover Message: Finished Cloudbox backup task in {{ total_time }} minutes."
    include_role:
      name: pushover
    vars:
      message: "Finished Cloudbox backup task in {{ total_time }} minutes."

  - name: "Start cloudplow service."
    systemd:
      name: cloudplow
      state: started
    when: cloudplow_service.stat.exists and cloudplow_service_running

  - name: "Start traktarr service."
    systemd:
      name: traktarr
      state: started
    when: traktarr_service.stat.exists and traktarr_service_running

  - name: "Remove {{backup.tar_dest}}."
    file:
      path: "{{backup.tar_dest}}"
      state: absent
    when: (dir_files2.matched|int != 0) and (not backup.keep_local_copy)

  - name: "Get ansible-playbook binary path."
    shell: "which ansible-playbook"
    register: playbook_binary
    tags: set-backup

  - name: "Remove legacy cron backup task."
    cron:
      name: "Backup Cloudbox"
      state: absent
    tags: set-backup

  - name: "Schedule cron backup."
    cron:
      name: "Cloudbox Backup"
      special_time: "{{backup.cron_time}}"
      job: "sudo PATH='/usr/bin:/bin:/usr/local/bin' env ANSIBLE_CONFIG='{{playbook_dir}}/ansible.cfg' '{{playbook_binary.stdout}}' '{{playbook_dir}}/cloudbox.yml' --tags backup --skip-tags settings >> '/home/{{user}}/logs/backup/cloudbox_backup.log' 2>&1"
      state: "{{backup.cron_state}}"
      user: "{{user}}"
    tags: set-backup

  - debug:
      msg: "Backup Completed Successfully."

  rescue:
    - name: "Start plexdrive service."
      systemd:
        name: plexdrive
        state: started
      when: plexdrive_service.stat.exists and plexdrive_service_running

    - name: "Wait for 5 seconds before starting containers."
      wait_for:
        timeout: 5

    - name: "Start all previously running Cloudbox-managed Docker containers."
      shell: 'docker start {{cloudbox_managed_containers.stdout}}'
      ignore_errors: yes
      when: not (cloudbox_managed_containers.stdout | trim == '')

    - name: "Start cloudplow service."
      systemd:
        name: cloudplow
        state: started
      when: cloudplow_service.stat.exists and cloudplow_service_running

    - name: "Start traktarr service."
      systemd:
        name: traktarr
        state: started
      when: traktarr_service.stat.exists and traktarr_service_running

    - debug:
        msg: 'Backup terminated due to an error.'

    - name: "Pushover Message: Backup terminated due to an error."
      include_role:
        name: pushover
      vars:
        message: "Backup terminated due to an error."

  always:
  - name: "Remove 'backup.lock'."
    file:
      path: "{{playbook_dir}}/backup.lock"
      state: absent

  - name: "Reset logs folder ownership."
    shell: "chown -R {{user}}:{{user}} /home/{{user}}/logs/"
    args:
      warn: no
