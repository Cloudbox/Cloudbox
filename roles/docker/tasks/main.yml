#########################################################################
# Title:         Cloudbox: Docker Role                                  #
# Author(s):     l3uddz, desimaniac, EnorMOZ                            #
# URL:           https://github.com/cloudbox/cloudbox                   #
# --                                                                    #
#         Part of the Cloudbox project: https://cloudbox.works          #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: Check filesystem of '/var/lib/' path
  shell: stat -f -c %T /var/lib/
  register: var_lib_file_system

- name: Check to see if docker is installed
  stat:
    path: "/usr/bin/docker"
  register: docker_binary

- name: Populate Service Facts
  service_facts:
  when: docker_binary.stat.exists

- name: Get Docker service state
  set_fact:
    docker_service_running: "{{ (services['docker.service'] is defined) and (services['docker.service']['state'] == 'running') }}"
  when: docker_binary.stat.exists

- name: Tasks for when Docker exists and is running
  block:

  - name: Gather list of running Docker containers
    shell: "docker ps --format '{{ '{{' }} .Names{{ '}}' }}' | xargs echo -n"
    register: docker_running_containers
    ignore_errors: yes

  - name: Stop all running Docker containers
    shell: "docker stop {{ docker_running_containers.stdout }} &> /dev/null || true"
    ignore_errors: yes
    when: (docker_running_containers.stdout | trim | length > 0)

  - name: Btrfs Tasks
    include_tasks: "subtasks/btrfs/cleanup.yml"
    when: ('btrfs' in var_lib_file_system.stdout)

  - name: Stop docker service
    systemd:
      name: docker
      state: stopped

  when: (docker_binary.stat.exists) and (docker_service_running)

- name: Add official gpg signing key
  apt_key:
    id: 0EBFCD88
    url: https://download.docker.com/linux/ubuntu/gpg

- name: Add official repository
  apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} edge"
    filename: docker
  register: apt_docker_repositories

- name: Update APT packages list
  apt:
    update_cache: yes
  when: apt_docker_repositories.changed

- name: Release 'docker-ce' from hold
  dpkg_selections:
    name: docker-ce
    selection: install

- name: Install 'docker-ce'
  apt:
    name: "docker-ce=*18.09.2~3-0~{{ ansible_distribution | lower }}-{{ ansible_distribution_release | lower }}"
    state: present
    update_cache: yes
    force: yes

- name: Put 'docker-ce' into hold
  dpkg_selections:
    name: docker-ce
    selection: hold

- name: Get 'docker-ce' version
  shell: "/usr/bin/dockerd-ce --version | head -n 1 | awk '{ print $3 }' | sed 's/,$//'"
  register: docker_ce_version
  ignore_errors: yes

- name: Display 'docker-ce' version
  debug:
    msg: "Docker CE version {{ docker_ce_version.stdout }} installed."
  when: docker_ce_version is defined

- name: Release 'docker-ce-cli' from hold
  dpkg_selections:
    name: docker-ce-cli
    selection: install

- name: Install 'docker-ce-cli'
  apt:
    name: "docker-ce-cli=*18.09.2~3-0~{{ ansible_distribution | lower }}-{{ ansible_distribution_release | lower }}"
    state: present
    update_cache: yes
    force: yes

- name: Put 'docker-ce-cli' into hold
  dpkg_selections:
    name: docker-ce-cli
    selection: hold

- name: Get 'docker-ce-cli' version
  shell: "/usr/bin/docker --version | head -n 1 | awk '{ print $3 }' | sed 's/,$//'"
  register: docker_ce_cli_version
  ignore_errors: yes

- name: Display 'docker-ce-cli' version
  debug:
    msg: "Docker CE CLI version {{ docker_ce_cli_version.stdout }} installed."
  when: docker_ce_cli_version is defined

- name: Uninstall 'docker-py' pip module
  pip:
    name: docker-py
    state: absent
  ignore_errors: yes

- name: Install 'docker' pip module
  pip:
    name: docker
    state: latest
  ignore_errors: yes

- name: Btrfs psuedo file system tasks
  include_tasks: "subtasks/btrfs/pseudo_file_system.yml"
  when: ('btrfs' in var_lib_file_system.stdout)

- name: Import 'daemon.json'
  template:
    src: daemon.json.j2
    dest: /etc/docker/daemon.json
    mode: 0775
    force: yes

- name: Start docker
  systemd: name=docker state=started enabled=yes daemon_reload=yes

- name: Wait for 30 seconds before commencing
  wait_for:
    timeout: 30

- name: "Stop all Docker containers"
  shell: docker stop $(docker ps -aq) &> /dev/null || true

- name: "Import Docker Network tasks"
  import_tasks: "subtasks/network.yml"

- name: "Import Docker Housekeeping tasks"
  import_tasks: "subtasks/housekeeping.yml"
  tags: docker-housekeeping

- name: "Re-start all previously running Docker containers"
  shell: 'docker start {{ docker_running_containers.stdout }} &> /dev/null || true'
  when: (docker_binary.stat.exists) and (docker_service_running) and (docker_running_containers.stdout | trim | length > 0)

- name: "Install ctop"
  import_role:
    name: ctop
  tags: ctop
