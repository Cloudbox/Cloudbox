#########################################################################
# Title:            Cloudbox: Drive STRM                                #
# Author(s):        desimaniac, l3uddz                                  #
# URL:              https://github.com/cloudbox/cloudbox                #
# --                                                                    #
#         Part of the Cloudbox project: https://cloudbox.works          #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: "Set DNS Record on CloudFlare"
  include_role:
    name: cloudflare
  vars:
    subdomain: strm

- name: "Create drive_strm directories"
  file: "path={{item}} state=directory mode=0775 owner={{user}} group={{user}}"
  with_items:
    - "/opt/drive_strm"
    - "/opt/scripts/drive_strm"
    - "/mnt/strm"

- name: Stop and remove any existing container
  docker_container:
    name: drive_strm
    state: absent

- name: "Check if '/opt/drive_strm/config.json' exists"
  stat:
    path: "/opt/drive_strm/config.json"
  register: config_json

- name: Do the following tasks when 'config.json' does not exist.
  block:

  - name: "Get Google Drive Client ID"
    pause:
      prompt: "Enter your Google Drive Client ID"
    register: client_id

  - name: "Display Google Drive Client ID"
    debug: msg="Using Google Drive Client ID{{':'}} {{ client_id.user_input }}"

  - name: "Get Google Drive Client Secret"
    pause:
      prompt: "Enter your Google Drive Client Secret"
    register: client_secret

  - name: "Display Google Drive Client Secret"
    debug: msg="Using Google Drive Client Secret{{':'}} {{ client_secret.user_input }}"

  - name: Import 'config.json'
    template:
      src: config.json.js2
      dest: /opt/drive_strm/config.json
      owner: "{{user}}"
      group: "{{user}}"
      mode: 0775
      force: yes

  - name: "Remove existing 'token.json'"
    file:
      path: "/opt/drive_strm/token.json"
      state: absent

  when: not config_json.stat.exists

- name: "Check if '/opt/drive_strm/token.json' exists"
  stat:
    path: "/opt/drive_strm/token.json"
  register: existing_token_json

- name: "Do the following tasks when 'token.json' does not exist"
  block:

    - name: "Pull Docker image"
      docker_image:
        name: "cloudb0x/drive_strm:latest"

    - name: "Retrieve authorization link"
      docker_container:
        name: drive_strm
        image: "cloudb0x/drive_strm:latest"
        pull: no
        command: "{{item}}"
        detach: no
        keep_volumes: no
        cleanup: yes
        user: "{{uid}}:{{gid}}"
        volumes:
          - "/etc/localtime:/etc/localtime:ro"
          - "/opt/drive_strm:/config"
          - "/mnt/strm:/strm"
        networks:
          - name: cloudbox
            aliases:
              - drive_strm
        purge_networks: yes
        state: started
      register: authorize_link
      loop:
        - ["authorize", "-l"]
        - ["authorize", "-l"]

    - name: "Failed to retrieve authorization link"
      fail:
        debug: "Failed to retrieve authorization link"
      when: authorize_link.results[1].ansible_facts.docker_container.Output | trim == ""

    - name: "Authorization Link"
      debug:
        msg: "Authorization Link: {{ authorize_link.results[1].ansible_facts.docker_container.Output | trim }}"

    - name: "Authorization Code"
      pause:
        prompt: "Please visit the above link, retrive the authorization code, and enter it below"
      register: authorization_code

    - name: "Generate 'token.json'"
      docker_container:
        name: drive_strm
        image: "cloudb0x/drive_strm:latest"
        pull: no
        command: ["authorize", "-c", "{{ authorization_code.user_input }}"]
        detach: no
        keep_volumes: no
        cleanup: yes
        user: "{{uid}}:{{gid}}"
        volumes:
          - "/etc/localtime:/etc/localtime:ro"
          - "/opt/drive_strm:/config"
          - "/mnt/strm:/strm"
        networks:
          - name: cloudbox
            aliases:
              - drive_strm
        purge_networks: yes
        state: started

    - name: "Check if '/opt/drive_strm/token.json' exists"
      stat:
        path: "/opt/drive_strm/token.json"
      register: new_token_json

    - name: "Failed to generate 'token.json'"
      fail:
        msg: "Failed to generate 'token.json'"
      when: not new_token_json.stat.exists

  when: not existing_token_json.stat.exists

- name: Import 'drive_strm_rebuild.sh' script
  copy:
    src: "drive_strm_rebuild.sh"
    dest: "/opt/scripts/drive_strm/drive_strm_rebuild.sh"
    owner: "{{user}}"
    group: "{{user}}"
    mode: 0775
    force: no

- name: Rebuild strms
  shell: |
    APP_PATH="/opt/drive_strm"
    STRM_PATH="/mnt/strm"
    rm -rf ${STRM_PATH}/*
    rm ${APP_PATH}/*.db*
    jq -c '.page_token = "1"' ${APP_PATH}/token.json >> ${APP_PATH}/tmp.$$.json && mv ${APP_PATH}/tmp.$$.json ${APP_PATH}/token.json
  when: ('drive_strm_rebuild' in ansible_run_tags)

- name: "Create and start container"
  docker_container:
    name: drive_strm
    image: "cloudb0x/drive_strm:latest"
    pull: yes
    published_ports:
      - "7294:7294/tcp"
    user: "{{uid}}:{{gid}}"
    env:
      VIRTUAL_HOST: "strm.{{domain}}"
      VIRTUAL_PORT: 7294
      LETSENCRYPT_HOST: "strm.{{domain}}"
      LETSENCRYPT_EMAIL: "{{email}}"
      HTTPS_METHOD: noredirect
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - "/opt/drive_strm:/config"
      - "/mnt/strm:/strm"
    labels:
      "com.github.cloudbox.cloudbox_managed": "false"
    networks:
      - name: cloudbox
        aliases:
          - drive_strm
    purge_networks: yes
    restart_policy: unless-stopped
    state: started
