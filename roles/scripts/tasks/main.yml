#########################################################################
# Title:         Cloudbox: Scripts Role                                 #
# Author(s):     L3uddz, Desimaniac                                     #
# URL:           https://github.com/cloudbox/cloudbox                   #
# --                                                                    #
#         Part of the Cloudbox project: https://cloudbox.rocks          #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: Install common packages
  apt: "name={{item}} state=present"
  with_items:
    - jq
    - figlet
    - toilet
    - boxes
  ignore_errors: yes

- name: Install common pip modules
  pip: "name={{item}} state=latest"
  with_items:
    - yq
  ignore_errors: yes

- name: Create script directories
  file: "path={{item}} state=directory mode=0775 owner={{user}} group={{user}} recurse=yes"
  with_items:
    - /opt/scripts
    - /opt/scripts/docker
    - /opt/scripts/frontail
    - /opt/scripts/nzbs
    - /opt/scripts/nginx
    - /opt/scripts/plex
    - /opt/scripts/plex_autoscan
    - /opt/scripts/plexpy
    - /opt/scripts/torrents

- name: Check arrpush.legacy.sh exists
  stat:
    path: "/opt/scripts/torrents/arrpush.legacy.sh"
    get_attributes: false
    get_checksum: false
    get_md5: false
    get_mime: false
  register: arrpush_legacy_script

- name: Import arrpush.legacy.sh
  copy:
    src: "arrpush.legacy.sh"
    dest: "/opt/scripts/torrents/arrpush.legacy.sh"
    owner: "{{user}}"
    group: "{{user}}"
    mode: 0775
    force: yes
  when: arrpush_legacy_script.stat.exists == False

- name: Import remaining torrent scripts
  copy:
    src: "{{item}}"
    dest: "/opt/scripts/torrents/{{item}}"
    owner: "{{user}}"
    group: "{{user}}"
    mode: 0775
    force: yes
  with_items:
    - "arrpush.py"
    - "TorrentCleanup.py"

- name: Import plex scripts
  copy:
    src: "{{item}}"
    dest: "/opt/scripts/plex/{{item}}"
    owner: "{{user}}"
    group: "{{user}}"
    mode: 0775
    force: yes
  with_items:
    - "plex_token.sh"
    - "plex_trash_fixer.py"

- name: Import revoke_certs.sh
  template:
    src: "revoke_certs.sh.js2"
    dest: "/opt/scripts/nginx/revoke_certs.sh"
    owner: "{{user}}"
    group: "{{user}}"
    mode: 0775
    force: yes

- name: Import plex_autoscan_url.sh
  copy:
    src: "plex_autoscan_url.sh"
    dest: "/opt/scripts/plex_autoscan/plex_autoscan_url.sh"
    owner: "{{user}}"
    group: "{{user}}"
    mode: 0775
    force: yes

- name: Check if restart_containers.sh exists
  stat:
    path: "/opt/scripts/docker/restart_containers.sh"
    get_attributes: false
    get_checksum: false
    get_md5: false
    get_mime: false
  register: restart_containers

- name: Import restart_containers.sh
  copy:
    src: "restart_containers.sh"
    dest: "/opt/scripts/docker/restart_containers.sh"
    owner: "{{user}}"
    group: "{{user}}"
    mode: 0775
    force: yes
  when: restart_containers.stat.exists == False

- name: Check if frontail_custom_preset.json exists
  stat:
    path: "/opt/scripts/frontail/frontail_custom_preset.json"
    get_attributes: false
    get_checksum: false
    get_md5: false
    get_mime: false
  register: frontail_preset

- name: Import frontail_custom_preset.json
  copy:
    src: "frontail_custom_preset.json"
    dest: "/opt/scripts/frontail/frontail_custom_preset.json"
    owner: "{{user}}"
    group: "{{user}}"
    mode: 0775
    force: yes
  when: frontail_preset.stat.exists == False
