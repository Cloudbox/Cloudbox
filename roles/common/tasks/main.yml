---
- name: "Get {{user}} uid"
  shell: "id -u {{user}}"
  register: uid

- name: "Get {{user}} gid"
  shell: "id -g {{user}}"
  register: gid

- name: Install common packages
  apt: "name={{item}} state=present"
  with_items:
    - nano
    - unrar
    - unzip
    - p7zip
    - curl
    - sqlite3
    - vnstat
    - tree
    - lsof
    - man-db
    - ksmtuned
    - git
    - pwgen
    - rsync
    - logrotate
    - htop
    - iotop
    - nload
    - fail2ban
    - ufw
    - ncdu
    - mc
    - speedtest-cli
    - nethogs
    - dnsutils
    - glances
    - screen
    - tmux
    - apache2-utils
    - jq
  ignore_errors: yes

- name: Check to see if unrar installed
  stat:
    path: "/usr/bin/unrar"
  register: unrar_binary

- name: Install common packages
  apt: "name={{item}} state=present"
  with_items:
    - unrar-free
  ignore_errors: yes
  when: not unrar_binary.stat.exists

- name: Install common pip modules
  pip: "name={{item}} state=latest"
  with_items:
    - passlib
    - docker-py
    - certbot
    - ansible-toolbox
    - ndg-httpsclient
    - dnspython
    - yq
  ignore_errors: yes

- name: Install NodeJS
  shell: "curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash - && sudo apt-get install -y nodejs"

- name: Install common npm modules
  npm: "name={{item}} global=yes"
  with_items:
    - frontail

- name: Install hostess
  get_url:
    url:  https://github.com/cbednarski/hostess/releases/download/v0.3.0/hostess_linux_amd64
    dest: /usr/local/bin/hostess
    mode: 0755
    owner: root
    group: root
    force: yes
    validate_certs: no
  tags: update-hostess

- name: Install ngrok
  unarchive:
    src: https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip
    dest: /usr/local/bin
    copy: no
    mode: 0775
    validate_certs: no
  tags: update-ngrok

- name: Create common directories
  file: "path={{item}} state=directory mode=0775 owner={{user}} group={{user}}"
  with_items:
    - /home/{{user}}/logs
    - /mnt/local
    - /mnt/local/.unionfs-fuse
    - /mnt/local/Media
    - /mnt/local/Media/Movies
    - /mnt/local/Media/TV
    - /opt

- name: Check plexdrive mount folder exist
  stat:
    path: /mnt/plexdrive
  register: plexdrive_mnt

- name: Create /mnt/plexdrive
  file:
    path: /mnt/plexdrive
    state: directory
    mode: 0755
    owner: "{{user}}"
    group: "{{user}}"
    recurse: yes
  when: plexdrive_mnt.stat.exists == False

- name: Set /opt permissions
  shell: "chmod -R ugo+X /opt"
  args:
    warn: no

- name: Set /opt owner
  shell: "chown -R {{user}}:{{user}} /opt"
  args:
    warn: no
