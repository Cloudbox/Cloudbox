#########################################################################
# Title:         Cloudbox: Remote | Rclone Cache Tasks                  #
# Author(s):     desimaniac                                             #
# URL:           https://github.com/Cloudbox/Cloudbox                   #
# --                                                                    #
#         Part of the Cloudbox project: https://cloudbox.works          #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: Rclone Cache | Reset permissions for 'rclone.conf'
  file: "path={{ rclone_config_path }} state=file owner={{ user.name }} group={{ user.name }} mode=0775"

- name: Import Plex Auth Token role
  import_role:
    name: plex_auth_token
  when: plex_account_is_enabled

- name: Rclone Cache | Import 'rclone_cache.service'
  template:
    src: rclone_cache.service.j2
    dest: /etc/systemd/system/rclone_cache.service
    force: "{{ 'yes' if ('mounts_override' in ansible_run_tags) else 'no' }}"

- name: Rclone Cache | Systemd daemon-reload 'rclone_cache.service'
  systemd: name=rclone_cache.service state=stopped enabled=no daemon_reload=yes

- name: Rclone Cache | Enable cache in 'rclone.conf'
  blockinfile:
    path: "{{ rclone_config_path }}"
    state: present
    create: no
    marker: "### {mark} CLOUDBOX - RCLONE CACHE MOUNT ###"
    block: |
      [cache]
      type = cache
    insertbefore: '^\[{{ rclone.remote }}\]'
    owner: "{{ user.name }}"
    group: "{{ user.name }}"
    mode: 0755

- name: Rclone Cache | Get list of Rclone remotes in config
  shell: rclone listremotes
  become: yes
  become_user: "{{ user.name }}"
  register: rclone_config_remotes

- name: Rclone Cache | Set 'rclone_config_remotes' variable
  set_fact:
    rclone_config_remotes: "{{ (rclone_config_remotes.stdout).split() }}"

- name: Rclone Cache | Set 'rclone_remote_is_configured' variable
  set_fact:
    rclone_remote_is_configured: "{{ (rclone.remote + ':') in rclone_config_remotes }}"

- name: Rclone Cache | Tasks when Rclone remote is configured
  block:

  - name: "Rclone Cache | Test Rclone remote '{{ rclone.remote }}:'"
    shell: |
      rclone lsd '{{ rclone.remote }}:' \
        --user-agent='{{ user_agent }}'
    become: yes
    become_user: "{{ user.name }}"
    register: rclone_test
    failed_when: (rclone_test.rc|int > 5)

  - name: Rclone Cache | Set 'rclone_remote_is_working' variable
    set_fact:
      rclone_remote_is_working: "{{ rclone_test.rc | int == 0 }}"

  - name: Rclone Cache | Start 'rclone_cache.service'
    systemd: name=rclone_cache.service state=started enabled=yes
    when: rclone_remote_is_working

  - name: "Rclone Cache | Display error message when Rclone remote is not working properly"
    fail:
      msg:
        - "Rclone remote '{{ rclone.remote }}:' is not working properly."
        - "{{ rclone_test.stderr }}"
    when: not rclone_remote_is_working
    ignore_errors: yes

  when: rclone_remote_is_configured

- name: "Rclone Cache | Display error message when Rclone remote is not configured properly"
  fail:
    msg:
      - "Rclone remote '{{ rclone.remote }}:' is not configured properly."
  when: not rclone_remote_is_configured
  ignore_errors: yes
