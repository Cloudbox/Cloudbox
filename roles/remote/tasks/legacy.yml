#########################################################################
# Title:         Remote: Legacy Tasks                                   #
# Author(s):     desimaniac                                             #
# URL:           https://github.com/Cloudbox/Cloudbox                   #
# --                                                                    #
#         Part of the Cloudbox project: https://cloudbox.works          #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
# Plexdrive

- name: Check if 'plexdrive.service' exists
  stat:
    path: "/etc/systemd/system/plexdrive.service"
  register: plexdrive_service

- name: Tasks for 'plexdrive.service'
  block:

  - name: Stop and disable existing 'plexdrive.service'
    systemd: name=plexdrive state=stopped enabled=no

  - name: "Rename 'plexdrive.service' to 'plexdrive5.service'"
    shell: "mv /etc/systemd/system/plexdrive.service /etc/systemd/system/plexdrive5.service"

  - name: Edit title in new 'plexdrive5.service'
    replace:
      path: /etc/systemd/system/plexdrive5.service
      regexp: "plexdrive\\.service"
      replace: 'plexdrive5.service'

  - name: Edit description in new 'plexdrive5.service'
    lineinfile:
      path: "/etc/systemd/system/plexdrive5.service"
      regexp: '^Description=.*'
      line: "Description=Plexdrive5"
      state: present

  - name: Edit binary path in new 'plexdrive5.service'
    replace:
      path: /etc/systemd/system/plexdrive5.service
      regexp: "\\/opt\\/plexdrive"
      replace: '/opt/plexdrive5'

  - name: Replace '/mnt/plexdrive' with '/mnt/remote' in new 'plexdrive5.service'
    replace:
      path: /etc/systemd/system/plexdrive5.service
      regexp: "\\/mnt\\/plexdrive"
      replace: '/mnt/remote'

  - name: Systemd daemon-reload
    systemd: daemon_reload=yes

  when: (plexdrive_service.stat.exists)

- name: Check if '/opt/plexdrive' exists
  stat:
    path: "/opt/plexdrive"
  register: opt_plexdrive

- name: "Rename '/opt/plexdrive' to '/opt/plexdrive5'"
  shell: "mv /opt/plexdrive /opt/plexdrive5"
  when: (opt_plexdrive.stat.exists)

- name: Check if '/mnt/plexdrive' exists
  stat:
    path: "/mnt/plexdrive"
  register: mnt_plexdrive

- name: Tasks for '/mnt/plexdrive' path
  block:

  - name: "Force unmount '/mnt/plexdrive'"
    shell: "/bin/umount -f '/mnt/plexdrive' 2>/dev/null || :"
    ignore_errors: yes

  - name: "Remove empty directories in '/mnt/plexdrive'"
    shell: "find '/mnt/plexdrive' -type d -empty -delete"
    ignore_errors: yes

  - name: Recursively find '/mnt/plexdrive' files
    find:
      paths: '/mnt/plexdrive'
      hidden: yes
      recurse: yes
    register: mnt_plexdrive_files

  - name: "Backup non-empty '/mnt/plexdrive' path"
    shell: "mv /mnt/plexdrive /mnt/plexdrive_{{ lookup('pipe','date +%Y-%m-%d_%H.%M.%S') }}"
    when: (mnt_plexdrive_files.matched|int > 0)

  - name: "Remove '/mnt/plexdrive'"
    file:
      path: "/mnt/plexdrive"
      state: absent
    when: (mnt_plexdrive_files.matched|int == 0)

  when: (mnt_plexdrive.stat.exists)

# Community Rclone VFS

- name: Check if 'rclone.service' exists
  stat:
    path: "/etc/systemd/system/rclone.service"
  register: rclone_service

- name: Tasks for 'rclone.service'
  block:

  - name: Stop and disable existing 'rclone.service'
    systemd: name=rclone state=stopped enabled=no

  - name: "Rename 'rclone.service' to 'rclone_vfs.service'"
    shell: "mv /etc/systemd/system/rclone.service /etc/systemd/system/rclone_vfs.service"

  - name: Edit title in new 'rclone_vfs.service'
    replace:
      path: /etc/systemd/system/rclone_vfs.service
      regexp: "rclone\\.service"
      replace: 'rclone_vfs.service'

  - name: Edit 'Description' in new 'rclone_vfs.service'
    lineinfile:
      path: "/etc/systemd/system/rclone_vfs.service"
      regexp: '^Description=.*'
      line: "Description=Rclone VFS"
      state: present

  - name: Edit 'AssertPathIsDirectory' in new 'rclone_vfs.service'
    lineinfile:
      path: "/etc/systemd/system/rclone_vfs.service"
      regexp: '^AssertPathIsDirectory=.*'
      state: absent

  - name: Edit 'Wants' in new 'rclone_vfs.service'
    lineinfile:
      path: "/etc/systemd/system/rclone_vfs.service"
      regexp: '^Wants=.*'
      state: absent

  - name: Edit 'Requires' in new 'rclone_vfs.service'
    lineinfile:
      path: "/etc/systemd/system/rclone_vfs.service"
      regexp: '^Requires=.*'
      state: absent

  - name: Replace '/mnt/rclone' with '/mnt/remote' in new 'rclone_vfs.service'
    replace:
      path: /etc/systemd/system/rclone_vfs.service
      regexp: "\\/mnt\\/rclone"
      replace: '/mnt/remote'

  - name: Systemd daemon-reload
    systemd: daemon_reload=yes

  when: (rclone_service.stat.exists)

- name: Check if 'prime-rclone.service' exists
  stat:
    path: "/etc/systemd/system/prime-rclone.service"
  register: prime_rclone_service

- name: Tasks for 'prime-rclone.service'
  block:

  - name: Stop and disable existing 'prime-rclone.service'
    systemd: name=prime-rclone state=stopped enabled=no

  - name: "Remove 'prime-rclone.service'"
    file:
      path: "/etc/systemd/system/prime-rclone.service"
      state: absent

  - name: Systemd daemon-reload
    systemd: daemon_reload=yes

  when: (prime_rclone_service.stat.exists)

- name: Check if '/mnt/rclone' exists
  stat:
    path: "/mnt/rclone"
  register: mnt_rclone

- name: Tasks for '/mnt/rclone' path
  block:

  - name: "Force unmount '/mnt/rclone'"
    shell: "/bin/umount -f '/mnt/rclone' 2>/dev/null || :"
    ignore_errors: yes

  - name: "Remove empty directories in '/mnt/rclone'"
    shell: "find '/mnt/rclone' -type d -empty -delete"
    ignore_errors: yes

  - name: Recursively find '/mnt/rclone' files
    find:
      paths: '/mnt/rclone'
      hidden: yes
      recurse: yes
    register: mnt_rclone_files

  - name: "Backup non-empty '/mnt/rclone' path"
    shell: "mv /mnt/rclone /mnt/rclone_{{ lookup('pipe','date +%Y-%m-%d_%H.%M.%S') }}"
    when: (mnt_rclone_files.matched|int > 0)

  - name: "Remove '/mnt/rclone'"
    file:
      path: "/mnt/rclone"
      state: absent
    when: (mnt_rclone_files.matched|int == 0)

  when: (mnt_rclone.stat.exists)
