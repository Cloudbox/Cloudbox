---
- name: Fail when no backup upload tool has been enabled
  fail: msg="You must set atleast one backup.use_* option in order to perform a restore"
  when: backup.use_rclone == False and backup.use_rsync == False

- name: "Check {{backup.tar_dest}} exists"
  stat:
    path: "{{backup.tar_dest}}"
    get_attributes: false
    get_checksum: false
    get_md5: false
    get_mime: false
  register: backup_location

- name: "Create backup location {{backup.tar_dest}}"
  file: path={{backup.tar_dest}} state=directory mode=0775 owner={{user}} group={{user}} recurse=true
  when: backup_location.stat.exists == False

- name: Ensure unzip is installed
  apt:
    name: unzip
    state: installed

- name: Check rclone.conf exists
  stat:
    path: "{{playbook_dir}}/rclone.conf"
  register: rclone_conf

- name: Check rclone installed
  stat:
    path: "/opt/rclone/rclone"
  register: rclone_bin

- name: Install rclone
  include_role:
    name: rclone
  when: backup.use_rclone and rclone_bin.stat.exists == False and rclone_conf.stat.exists

- name: Fail because no rclone and no rclone.conf
  fail: msg="rclone was not installed and there was no rclone.conf in the same path as cloudbox.yml, so could not install rclone automatically..."
  when: backup.use_rclone and rclone_bin.stat.exists == False and rclone_conf.stat.exists == False

- name: "Fetch cloudbox.tar from {{backup.rclone_dest}}"
  command: "rclone copy '{{backup.rclone_dest}}/cloudbox.tar' '{{backup.tar_dest}}' --stats=30s -v --transfers=2 --log-file='{{playbook_dir}}/restore_rclone.log'"
  become: true
  become_user: "{{user}}"
  when: (backup.use_rclone and backup.use_rsync) or (backup.use_rclone and backup.use_rsync == False)

- name: "Fetch cloudbox.tar from {{backup.rsync_dest}}"
  synchronize:
    src: "{{backup.rsync_dest}}/cloudbox.tar"
    dest: "{{backup.tar_dest}}/"
    rsync_opts:
      - "--log-file='{{playbook_dir}}/restore_rsync.log'"
  become: true
  become_user: "{{user}}"
  when: backup.use_rclone == False and backup.use_rsync

- name: "Check cloudbox.tar exists"
  stat:
    path: "{{backup.tar_dest}}/cloudbox.tar"
    get_attributes: false
    get_checksum: false
    get_md5: false
    get_mime: false
  register: cloudbox_tgz

- name: "Fail cloudbox.tar doesnt exist"
  fail: msg="There must have been an issue retrieving the cloudbox.tar file... as it does not exist at {{backup.tar_dest}}/cloudbox.tar"
  when: cloudbox_tgz.stat.exists == False

- name: "Wait for 10 seconds before unarchiving"
  wait_for:
    timeout: 10

- name: "Unarchive cloudbox.tar to /opt"
  shell: "tar -xf '{{backup.tar_dest}}/cloudbox.tar' -C /opt ."

- name: Set /opt permissions
  shell: "chmod -R 775 /opt"

- name: Set /opt owner
  shell: "chown -R {{user}}:{{user}} /opt"

- debug:
    msg: Finished unarchiving cloudbox.tar to /opt, you should now be ready to perform an installation!
