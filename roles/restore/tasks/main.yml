#########################################################################
# Title:         Cloudbox: Restore Role                                 #
# Author(s):     L3uddz, Desimaniac                                     #
# URL:           https://github.com/Cloudbox/Cloudbox                   #
# --                                                                    #
#         Part of the Cloudbox project: https://cloudbox.rocks          #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: "Check cloudbox.tar exists"
  stat:
    path: "{{backup.tar_dest}}/cloudbox.tar"
    get_attributes: false
    get_checksum: false
    get_md5: false
    get_mime: false
  register: cloudbox_tar1

- name: Fail when no backup upload tool has been enabled or no local backup copy exists
  fail: msg="You must set atleast one backup.use_* option in order to perform a restore"
  when: (backup.use_rclone == False and backup.use_rsync == False) and not(backup.keep_local_copy and cloudbox_tar1.stat.exists)

- name: Check rclone.conf exists
  stat:
    path: "{{playbook_dir}}/rclone.conf"
  register: rclone_conf_playbook_dir

- name: Check rclone.conf exists
  stat:
    path: "/home/{{user}}/.config/rclone/rclone.conf"
  register: rclone_conf_user_dir

- name: Fail when no rclone.conf is found
  fail: msg="You must place your rclone.conf file in {{playbook_dir}} or setup Rclone via rclone config"
  when: backup.use_rclone and not(
      (rclone_conf_playbook_dir.stat.exists)
      or
      (rclone_conf_user_dir.stat.exists)
    )

- name: Ensure unzip is installed
  apt:
    name: unzip
    state: present

- name: "Check {{backup.tar_dest}} exists"
  stat:
    path: "{{backup.tar_dest}}"
    get_attributes: false
    get_checksum: false
    get_md5: false
    get_mime: false
  register: backup_location

- name: "Create backup location {{backup.tar_dest}}"
  file: path={{backup.tar_dest}} state=directory mode=0775 owner={{user}} group={{user}} recurse=yes
  when: backup_location.stat.exists == False

- name: Check rclone installed
  stat:
    path: "/usr/bin/rclone"
  register: rclone_bin

- name: Install rclone
  include_role:
    name: rclone
  when: backup.use_rclone and rclone_bin.stat.exists == False

- name: Ensure rclone folders exists
  file: "path={{item}} state=directory mode=0775 owner={{user}} group={{user}} recurse=yes"
  with_items:
    - "/home/{{user}}/.config/rclone"

- name: "Copy '{{playbook_dir}}/rclone.conf' to '/home/{{user}}/.config/rclone/rclone.conf'"
  copy:
    src: "{{playbook_dir}}/rclone.conf"
    dest: "/home/{{user}}/.config/rclone/rclone.conf"
    mode: 0775
    owner: "{{user}}"
    group: "{{user}}"
  when: rclone_conf_playbook_dir.stat.exists

- name: "Remove '{{playbook_dir}}/rclone.conf'"
  file:
    path: "{{playbook_dir}}/rclone.conf"
    state: absent
  when: rclone_conf_playbook_dir.stat.exists

- name: "Fetch cloudbox.tar from {{backup.rclone_dest}}"
  command: "rclone copy '{{backup.rclone_dest}}/cloudbox.tar' '{{backup.tar_dest}}' --stats=30s -v --transfers=2 --log-file='{{playbook_dir}}/restore_rclone.log'"
  become: yes
  become_user: "{{user}}"
  when: ((backup.use_rclone and backup.use_rsync) or (backup.use_rclone and backup.use_rsync == False)) and not(backup.keep_local_copy and cloudbox_tar1.stat.exists)

- name: "Fetch cloudbox.tar from {{backup.rsync_dest}}"
  synchronize:
    src: "{{backup.rsync_dest}}/cloudbox.tar"
    dest: "{{backup.tar_dest}}/"
    rsync_opts:
      - "--log-file='{{playbook_dir}}/restore_rsync.log'"
  become: yes
  become_user: "{{user}}"
  when: (backup.use_rclone == False and backup.use_rsync) and not(backup.keep_local_copy and cloudbox_tar1.stat.exists)

- name: "Check cloudbox.tar exists"
  stat:
    path: "{{backup.tar_dest}}/cloudbox.tar"
    get_attributes: false
    get_checksum: false
    get_md5: false
    get_mime: false
  register: cloudbox_tar2

- name: "Fail cloudbox.tar doesnt exist"
  fail: msg="There must have been an issue retrieving the cloudbox.tar file... as it does not exist at {{backup.tar_dest}}/cloudbox.tar"
  when: cloudbox_tar2.stat.exists == False

- name: "Wait for 10 seconds before unarchiving"
  wait_for:
    timeout: 10

- name: Create /opt directory
  file: "path={{item}} state=directory mode=0775 owner={{user}} group={{user}}"
  with_items:
    - /opt

- name: "Unarchive cloudbox.tar to /opt"
  shell: "tar -xf '{{backup.tar_dest}}/cloudbox.tar' -C /opt ."

- name: Remove cloudbox.tar
  file:
    path: "{{backup.tar_dest}}/cloudbox.tar"
    state: absent
  when: backup.keep_local_copy == False

- name: Set /opt permissions
  shell: "chmod -R ugo+X /opt"
  args:
    warn: no

- name: Set /opt owner
  shell: "chown -R {{user}}:{{user}} /opt"
  args:
    warn: no

- debug:
    msg: Finished unarchiving the contents of cloudbox.tar to /opt/, you should now be ready to perform an installation (i.e. Full, Plex, or Feeder)!
