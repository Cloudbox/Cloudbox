#########################################################################
# Title:         Cloudbox: ruTorrent Role                               #
# Author(s):     L3uddz, Horjulf                                        #
# URL:           https://github.com/Cloudbox/Cloudbox                   #
# Docker Image:  horjulf/rutorrent-autodl                               #
# --                                                                    #
#         Part of the Cloudbox project: https://cloudbox.rocks          #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: "Setting CloudFlare DNS Record"
  include_role:
    name: cloudflare
  vars:
    subdomain: rutorrent

- name: "Get {{user}} uid"
  shell: "id -u {{user}}"
  register: uid

- name: "Get {{user}} gid"
  shell: "id -g {{user}}"
  register: gid

- name: Create rutorrent directories
  file: "path={{item}} state=directory mode=0775 owner={{user}} group={{user}}"
  with_items:
    - /opt/rutorrent

- name: Stop and remove any existing container
  docker_container:
    name: rutorrent
    state: absent

- name: Create rutorrent download directory
  file: "path={{rutorrent.downloads}} state=directory mode=0775 owner={{user}} group={{user}}"

- name: "Set {{rutorrent.downloads}} permissions"
  shell: "chmod -R 775 {{rutorrent.downloads}}"

- name: "Set {{rutorrent.downloads}} owner"
  shell: "chown -R {{user}}:{{user}} {{rutorrent.downloads}}"

- name: Check rtorrent.rc exists
  stat:
    path: "/opt/rutorrent/rtorrent/rtorrent.rc"
  register: rtorrent_rc

- name: Create and start container
  docker_container:
    name: rutorrent
    image: horjulf/rutorrent-autodl
    pull: yes
    published_ports:
      - "127.0.0.1:3111:80"
      - "51413:51413"
      - "6881:6881/udp"
    env:
      PUID: "{{uid.stdout}}"
      PGID: "{{gid.stdout}}"
      VIRTUAL_HOST: "rutorrent.{{domain}}"
      VIRTUAL_PORT: 80
      LETSENCRYPT_HOST: "rutorrent.{{domain}}"
      LETSENCRYPT_EMAIL: "{{email}}"
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - "/opt/rutorrent:/config"
      - "{{rutorrent.downloads}}:/downloads/rutorrent"
      - "/mnt:/mnt"
      - "/opt/scripts/torrent:/scripts"
    networks:
      - name: cloudbox
        aliases:
          - rutorrent
    restart_policy: always
    stop_timeout: 300
    state: started

- name: Wait for rtorrent.rc to be created
  wait_for:
    path: "/opt/rutorrent/rtorrent/rtorrent.rc"
    state: present
  when: rtorrent_rc.stat.exists == False

- name: Wait for php.ini to be created
  wait_for:
    path: "/opt/rutorrent/php/php.ini"
    state: present
  when: rtorrent_rc.stat.exists == False

- name: Wait for nginx.conf to be created
  wait_for:
    path: "/opt/rutorrent/nginx/nginx.conf"
    state: present
  when: rtorrent_rc.stat.exists == False

- name: Wait for plugins.ini to be created
  wait_for:
    path: "/opt/rutorrent/rutorrent/settings/plugins.ini"
    state: present
  when: rtorrent_rc.stat.exists == False

- name: "Wait for 10 seconds before stopping rutorrent container"
  wait_for:
    timeout: 10
  when: rtorrent_rc.stat.exists == False

- name: Stop container to customize rtorrent.rc
  docker_container:
    name: rutorrent
    image: horjulf/rutorrent-autodl
    state: stopped
  when: rtorrent_rc.stat.exists == False

- name: Change downloads directory
  lineinfile:
    path: "/opt/rutorrent/rtorrent/rtorrent.rc"
    regexp: '^directory\s?='
    line: 'directory = /downloads/rutorrent'
    state: present
  when: rtorrent_rc.stat.exists == False

- name: Disable DHT
  lineinfile:
    path: "/opt/rutorrent/rtorrent/rtorrent.rc"
    regexp: '^dht\s?='
    line: 'dht = disable'
    state: present
  when: rtorrent_rc.stat.exists == False

- name: Disable PEX
  lineinfile:
    path: "/opt/rutorrent/rtorrent/rtorrent.rc"
    regexp: '^peer_exchange\s?='
    line: 'peer_exchange = no'
    state: present
  when: rtorrent_rc.stat.exists == False

- name: Reduce min_peers
  lineinfile:
    path: "/opt/rutorrent/rtorrent/rtorrent.rc"
    regexp: '^min_peers\s?='
    line: 'min_peers = 1'
    state: present
  when: rtorrent_rc.stat.exists == False

- name: Increase max_uploads
  lineinfile:
    path: "/opt/rutorrent/rtorrent/rtorrent.rc"
    regexp: '^max_uploads\s?='
    line: 'max_uploads = 1024'
    state: present
  when: rtorrent_rc.stat.exists == False

- name: Disable check_hash
  lineinfile:
    path: "/opt/rutorrent/rtorrent/rtorrent.rc"
    regexp: '^check_hash\s?='
    line: 'check_hash = no'
    state: present
  when: rtorrent_rc.stat.exists == False

- name: Set upload_rate to unlimited
  lineinfile:
    path: "/opt/rutorrent/rtorrent/rtorrent.rc"
    regexp: '^upload_rate\s?='
    line: 'upload_rate = 0'
    state: present
  when: rtorrent_rc.stat.exists == False

- name: Set download_rate to unlimited
  lineinfile:
    path: "/opt/rutorrent/rtorrent/rtorrent.rc"
    regexp: '^download_rate\s?='
    line: 'download_rate = 0'
    state: present
  when: rtorrent_rc.stat.exists == False

- name: Set global upload_rate to unlimited
  lineinfile:
    path: "/opt/rutorrent/rtorrent/rtorrent.rc"
    regexp: '^throttle.global_up.max_rate.set_kb\s?='
    line: 'throttle.global_up.max_rate.set_kb = 0'
    state: present
  when: rtorrent_rc.stat.exists == False

- name: Set global download_rate to unlimited
  lineinfile:
    path: "/opt/rutorrent/rtorrent/rtorrent.rc"
    regexp: '^throttle.global_down.max_rate.set_kb\s?='
    line: 'throttle.global_down.max_rate.set_kb = 0'
    state: present
  when: rtorrent_rc.stat.exists == False

- name: Set max_open_files to 1024
  lineinfile:
    path: "/opt/rutorrent/rtorrent/rtorrent.rc"
    regexp: '^network.max_open_files.set\s?='
    line: 'network.max_open_files.set = 1024'
    state: present
  when: rtorrent_rc.stat.exists == False

- name: Set encryption parameters
  lineinfile:
    path: "/opt/rutorrent/rtorrent/rtorrent.rc"
    regexp: '^encryption\s?='
    line: 'encryption = allow_incoming,enable_retry,prefer_plaintext'
    state: present
  when: rtorrent_rc.stat.exists == False

- name: Set max_downloads_global to 1024
  lineinfile:
    path: "/opt/rutorrent/rtorrent/rtorrent.rc"
    regexp: '^max_downloads_global\s?='
    line: 'max_downloads_global = 1024'
    state: present
  when: rtorrent_rc.stat.exists == False

- name: Set max_uploads_global to 1024
  lineinfile:
    path: "/opt/rutorrent/rtorrent/rtorrent.rc"
    regexp: '^max_uploads_global\s?='
    line: 'max_uploads_global = 1024'
    state: present
  when: rtorrent_rc.stat.exists == False

- name: Set file_allocate to no
  lineinfile:
    path: "/opt/rutorrent/rtorrent/rtorrent.rc"
    regexp: '^system.file_allocate.set\s?='
    line: 'system.file_allocate.set = no'
    state: present
  when: rtorrent_rc.stat.exists == False

- name: Set upload_max_filesize to 8M
  lineinfile:
    path: "/opt/rutorrent/php/php.ini"
    regexp: '^upload_max_filesize\s?='
    line: 'upload_max_filesize = 8M'
    state: present
  when: rtorrent_rc.stat.exists == False

- name: Copy across custom nginx.conf with htpasswd support
  copy:
    src: nginx.conf
    dest: /opt/rutorrent/nginx/nginx.conf
    owner: "{{user}}"
    group: "{{user}}"
    mode: 0775
    force: yes
  when: rtorrent_rc.stat.exists == False

- name: Create htpasswd
  htpasswd:
    path: /opt/rutorrent/nginx/.htpasswd
    name: "{{user}}"
    password: "{{rutorrent.passwd}}"
    owner: "{{user}}"
    group: "{{user}}"
    mode: 0775
  when: rtorrent_rc.stat.exists == False

- name: Copy across custom plugins.ini
  copy:
    src: plugins.ini
    dest: "/opt/rutorrent/rutorrent/settings/plugins.ini"
    owner: "{{user}}"
    group: "{{user}}"
    mode: 0775
    force: yes
  when: rtorrent_rc.stat.exists == False

- name: Start container to apply changes
  docker_container:
    name: rutorrent
    state: started
  when: rtorrent_rc.stat.exists == False
