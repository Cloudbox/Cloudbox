---
- name: Ensure using kernel 4.10 or newer
  fail: msg="You must be using kernel 4.10.0-32-generic or newer! Use --tags kernel to upgrade first!"
  when: ansible_kernel | version_compare('4.10', '<')

- name: Create common groups
  group: "name={{item}} state=present"
  with_items:
    - docker
    - "{{user}}"

- name: "Create user {{user}}"
  user:
    name: "{{user}}"
    group: "{{user}}"
    groups: "{{user}},docker,sudo"
    password: "{{ passwd |password_hash('sha512') }}"
    update_password: on_create
    append: yes
    shell: /bin/bash
    

- lineinfile:
    path: /etc/sudoers
    state: absent
    regexp: '^%wheel'

- name: "Make cloudbox folder readable/writeable by {{user}}"
  file: "path={{playbook_dir}} state=directory mode=0775 owner={{user}} group={{user}} recurse=true"

- name: Check plexdrive.service exists
  stat:
    path: "/etc/systemd/system/plexdrive.service"
  register: plexdrive_service_check

- name: Stop all docker containers
  shell: "docker stop $(docker ps -aq)"
  ignore_errors: yes
  when: plexdrive_service_check.stat.exists  

- name: Stop plexdrive service
  systemd:
    name: plexdrive
    state: stopped
  when: plexdrive_service_check.stat.exists

# Will uncomment this when/if I ever figure out how to fix plexdrive_token_builder to generate a valid token that plexdrive is able to refresh after the 1hr has expired
# currently it can use the supplied token for an hour, then it is unable to re-authorize - and not sure why as as far as I can tell, the script mimics plexdrive's auth url and token retrieval requests

# - name: "Check plexdrive token.json exists"
#   stat:
#     path: /opt/plexdrive/token.json
#   register: plexdrive_token

# - name: "Fail when no client_id / client_secret provided in settings.yml"
#   fail: msg="You have no existing token.json in your /opt/plexdrive. You must set a client_id and client_secret in settings.yml for plexdrive"
#   when: plexdrive_token.stat.exists == False and (plexdrive.client_id|default("") == "" or plexdrive.client_secret|default("") == "")

# - name: "Install pip"
#   apt: "name=python-pip state=installed"
#   when: plexdrive_token.stat.exists == False

# - name: "Install python requests module"
#   pip: "name=requests state=latest"
#   when: plexdrive_token.stat.exists == False

# - name: "Import plexdrive_token_builder.py"
#   copy:
#     src: "plexdrive_token_builder.py"
#     dest: "{{playbook_dir}}/plexdrive_token_builder.py"
#     owner: "{{user}}"
#     group: "{{user}}"
#     mode: a+x
#     force: yes
#   when: plexdrive_token.stat.exists == False

# - name: "Generate plexdrive authorization link"
#   command: "{{playbook_dir}}/plexdrive_token_builder.py {{plexdrive.client_id}} {{plexdrive.client_secret}}"
#   become: true
#   become_user: "{{user}}"
#   register: plexdrive_auth_link
#   when: plexdrive_token.stat.exists == False

# - name: "Ask user for plexdrive authorization code"
#   pause:
#     prompt: "You need to authorize plexdrive, please visit {{plexdrive_auth_link.stdout}} and choose the account to use plexdrive with. Paste the code below and press enter"
#   register: plexdrive_auth_code
#   when: plexdrive_token.stat.exists == False

# - name: "Build plexdrive config.json && token.json"
#   command: "{{playbook_dir}}/plexdrive_token_builder.py {{plexdrive.client_id}} {{plexdrive.client_secret}} {{plexdrive_auth_code.user_input}}"
#   become: true
#   become_user: "{{user}}"
#   register: plexdrive_auth_link
#   when: plexdrive_token.stat.exists == False

# - name: "Check if token.json was built"
#   stat:
#     path: "{{playbook_dir}}/token.json"
#   register: plexdrive_built_token
#   when: plexdrive_token.stat.exists == False

# - name: "Fail when built token.json does not exist"
#   fail: msg="There was a problem building your config.json && token.json for plexdrive."
#   when: plexdrive_token.stat.exists == False and plexdrive_built_token.stat.exists == False

# - name: "Ensure plexdrive folder exists in /opt"
#   file: "path=/opt/plexdrive state=directory mode=0775 owner={{user}} group={{user}} recurse=true"
#   when: plexdrive_token.stat.exists == False and plexdrive_built_token.stat.exists

# - name: Import generated token.json
#   copy:
#     src: "{{playbook_dir}}/token.json"
#     dest: /opt/plexdrive/token.json
#     owner: "{{user}}"
#     group: "{{user}}"
#     mode: 0775
#   when: plexdrive_token.stat.exists == False and plexdrive_built_token.stat.exists

# - name: Import generated config.json
#   copy:
#     src: "{{playbook_dir}}/config.json"
#     dest: /opt/plexdrive/config.json
#     owner: "{{user}}"
#     group: "{{user}}"
#     mode: 0775
#   when: plexdrive_token.stat.exists == False and plexdrive_built_token.stat.exists

# - name: Cleanup generated token.json
#   file:
#     path: "{{playbook_dir}}/token.json"
#     state: absent
#   when: plexdrive_token.stat.exists == False and plexdrive_built_token.stat.exists

# - name: Cleanup generated config.json
#   file:
#     path: "{{playbook_dir}}/config.json"
#     state: absent
#   when: plexdrive_token.stat.exists == False and plexdrive_built_token.stat.exists

# - name: Cleanup plexdrive_token_builder.py
#   file:
#     path: "{{playbook_dir}}/plexdrive_token_builder.py"
#     state: absent
#   when: plexdrive_token.stat.exists == False and plexdrive_built_token.stat.exists

# - debug: msg="Successfully built and imported your config.json && token.json"
#   when: plexdrive_token.stat.exists == False and plexdrive_built_token.stat.exists
  